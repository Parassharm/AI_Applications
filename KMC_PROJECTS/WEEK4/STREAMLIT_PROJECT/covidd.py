# üì¶ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä‡§π‡§∞‡•Ç
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from PIL import Image
import base64

# üé® ‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø ‡§∞ ‡§∂‡•à‡§≤‡•Ä ‡§∏‡•á‡§ü‡§Ö‡§™
def set_background():
    # ‡§è‡§∏‡•ç‡§•‡•á‡§ü‡§ø‡§ï ‡§¨‡•ç‡§Ø‡§æ‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§®‡•ç‡§° ‡§á‡§Æ‡•á‡§ú
    st.markdown(
        f"""
        <style>
        .stApp {{
            background: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.8)), 
                        url("data:image/png;base64,{base64.b64encode(open('health_bg.jpg', 'rb').read()).decode()}");
            background-size: cover;
            background-attachment: fixed;
            font-family: 'Arial Unicode MS', 'Preeti', sans-serif;
        }}
        
        /* ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§°‡§ø‡§ú‡§æ‡§á‡§® */
        .sidebar .sidebar-content {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
            color: white;
            border-right: 2px solid #4b6cb7;
        }}
        
        /* ‡§ï‡§æ‡§∞‡•ç‡§° ‡§°‡§ø‡§ú‡§æ‡§á‡§® */
        .custom-card {{
            background-color: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
            margin-bottom: 25px;
            border-left: 5px solid #4b6cb7;
        }}
        
        /* ‡§π‡•á‡§°‡§∞ ‡§°‡§ø‡§ú‡§æ‡§á‡§® */
        .main-header {{
            background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }}
        
        /* ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§¨‡§ï‡•ç‡§∏‡§π‡§∞‡•Ç */
        .alert-high-risk {{
            background: linear-gradient(135deg, #ff758c 0%, #ff7eb3 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            border-left: 6px solid #e53e3e;
        }}
        
        .alert-low-risk {{
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            border-left: 6px solid #38a169;
        }}
        
        /* ‡§¨‡§ü‡§® ‡§°‡§ø‡§ú‡§æ‡§á‡§® */
        .stButton>button {{
            background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 24px;
            font-weight: bold;
        }}
        
        /* ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï ‡§¨‡§ï‡•ç‡§∏ */
        .metric-box {{
            background: rgba(255,255,255,0.9);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border-left: 4px solid #4b6cb7;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# üëâ ‡§°‡§æ‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§®‡•á
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("Covid Data.csv")
        
        # ‡§°‡§æ‡§ü‡§æ ‡§∏‡§´‡§æ ‡§ó‡§∞‡•ç‡§®‡•á
        df = df.drop_duplicates()
        df['IS_DEAD'] = df['DATE_DIED'].apply(lambda x: 0 if x == '9999-99-99' else 1)
        
        cols_to_clean = ['ICU', 'PNEUMONIA', 'DIABETES', 'COPD', 'ASTHMA', 'INMSUPR', 
                         'CARDIOVASCULAR', 'OBESITY', 'RENAL_CHRONIC', 'TOBACCO']
        df[cols_to_clean] = df[cols_to_clean].replace([97, 98, 99], np.nan)
        df = df.dropna(subset=cols_to_clean)
        
        return df
    
    except Exception as e:
        st.markdown(f"""
        <div class="custom-card" style="border-left-color: #e53e3e;">
        <h3 style="color:#e53e3e;">‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø</h3>
        <p>‡§°‡§æ‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§¶‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§Ø‡•ã: <strong>{str(e)}</strong></p>
        <p>‡§ï‡•É‡§™‡§Ø‡§æ 'Covid Data.csv' ‡§´‡§æ‡§á‡§≤ ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</p>
        </div>
        """, unsafe_allow_html=True)
        return None

# üìä ‡§°‡§æ‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ö‡§æ‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç
def show_analysis(df):
    st.markdown("""
    <div class="custom-card">
    <h3 style="color:#2a4365; text-align:center;">üìà ‡§°‡§æ‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£</h3>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # ‡§â‡§Æ‡•á‡§∞ ‡§µ‡§ø‡§§‡§∞‡§£
        fig, ax = plt.subplots(figsize=(10,5))
        df['AGE'].hist(bins=20, ax=ax, color='#4b6cb7', edgecolor='white')
        ax.set_title('Age distribution', fontsize=14, pad=20)
        ax.set_xlabel('Age', fontsize=12)
        ax.set_ylabel('Calculation', fontsize=12)
        ax.grid(axis='y', alpha=0.3)
        st.pyplot(fig)
    
    with col2:
        # ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§¶‡§∞
        death_rate = df['IS_DEAD'].value_counts(normalize=True) * 100
        fig, ax = plt.subplots(figsize=(10,5))
        death_rate.plot(kind='bar', color=['#38a169', '#e53e3e'], edgecolor='white', ax=ax)
        ax.set_title('Death rate', fontsize=14, pad=20)
        ax.set_xticklabels(['Alive', 'Dead'], rotation=0, fontsize=12)
        ax.set_ylabel('Percentage', fontsize=12)
        ax.grid(axis='y', alpha=0.3)
        st.pyplot(fig)

    # ‡§°‡§æ‡§ü‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂
    st.markdown("""
    <div class="custom-card">
    <h4 style="color:#2a4365; text-align:center;">üìã ‡§°‡§æ‡§ü‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"""
        <div class="metric-box">
        <h4 style="color:#4b6cb7;">‡§ï‡•Å‡§≤ ‡§°‡§æ‡§ü‡§æ</h4>
        <h2 style="color:#2a4365;">{df.shape[0]:,}</h2>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown(f"""
        <div class="metric-box">
        <h4 style="color:#4b6cb7;">‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§≠‡§è‡§ï‡§æ</h4>
        <h2 style="color:#e53e3e;">{df['IS_DEAD'].sum():,}</h2>
        </div>
        """, unsafe_allow_html=True)
    with col3:
        st.markdown(f"""
        <div class="metric-box">
        <h4 style="color:#4b6cb7;">‡§¨‡§æ‡§Å‡§ö‡•á‡§ï‡§æ</h4>
        <h2 style="color:#38a169;">{len(df) - df['IS_DEAD'].sum():,}</h2>
        </div>
        """, unsafe_allow_html=True)

# ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∏‡§®
def main():
    # ‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø ‡§∏‡•á‡§ü‡§Ö‡§™
    set_background()
    
    # ‡§π‡•á‡§°‡§∞ ‡§∏‡•á‡§ï‡•ç‡§∏‡§®
    st.markdown("""
    <div class="main-header">
    <h1 style="color:white; margin-bottom:10px;">COVID-19 ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®</h1>
    <p style="font-size:18px; color:rgba(255,255,255,0.9);">‡§Ø‡•ã ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∏‡§®‡§≤‡•á Logistic Regression ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•á‡§∞ COVID-19 ‡§∞‡•ã‡§ó‡•Ä‡§ï‡•ã ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å‡§ï‡•ã ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ó‡§∞‡•ç‡§õ</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡§°‡§æ‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§®‡•á
    df = load_data()
    
    if df is not None:
        # ‡§Æ‡•ã‡§°‡•á‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•á
        features = ['AGE', 'SEX', 'DIABETES', 'OBESITY', 'PNEUMONIA', 'TOBACCO']
        X = df[features]
        y = df['IS_DEAD']
        model = LogisticRegression(max_iter=1000)
        model.fit(X, y)
        
        # -------------------------------
        # ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§á‡§®‡§™‡•Å‡§ü
        # -------------------------------
        with st.sidebar:
            st.markdown("""
            <div style="background-color:rgba(255,255,255,0.2); padding:15px; border-radius:12px; margin-bottom:25px;">
            <h3 style="color:green; text-align:center;">üßæ ‡§∞‡•ã‡§ó‡•Ä‡§ï‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
            </div>
            """, unsafe_allow_html=True)
            
            AGE = st.slider("‡§â‡§Æ‡•á‡§∞", 0, 120, 40, help="‡§∞‡•ã‡§ó‡•Ä‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞")
            SEX = st.selectbox("‡§≤‡§ø‡§ô‡•ç‡§ó", ("‡§™‡•Å‡§∞‡•Å‡§∑", "‡§Æ‡§π‡§ø‡§≤‡§æ"), index=0)
            SEX = 1 if SEX == "‡§™‡•Å‡§∞‡•Å‡§∑" else 2
            
            DIABETES = st.selectbox("‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π", ("‡§õ‡•à‡§®", "‡§õ"), index=0)
            DIABETES = 1 if DIABETES == "‡§õ" else 2
            
            OBESITY = st.selectbox("‡§Æ‡•ã‡§ü‡•ã‡§™‡§®", ("‡§õ‡•à‡§®", "‡§õ"), index=0)
            OBESITY = 1 if OBESITY == "‡§õ" else 2
            
            PNEUMONIA = st.selectbox("‡§®‡§ø‡§Æ‡•ã‡§®‡§ø‡§Ø‡§æ", ("‡§õ‡•à‡§®", "‡§õ"), index=0)
            PNEUMONIA = 1 if PNEUMONIA == "‡§õ" else 2
            
            TOBACCO = st.selectbox("‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§®", ("‡§õ‡•à‡§®", "‡§õ"), index=0)
            TOBACCO = 1 if TOBACCO == "‡§õ" else 2
            
            if st.button("üîç ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç", use_container_width=True):
              st.success("‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã!")


        
        # ‡§á‡§®‡§™‡•Å‡§ü ‡§°‡§æ‡§ü‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•á
        input_data = {
            'AGE': AGE,
            'SEX': SEX,
            'DIABETES': DIABETES,
            'OBESITY': OBESITY,
            'PNEUMONIA': PNEUMONIA,
            'TOBACCO': TOBACCO
        }
        input_df = pd.DataFrame([input_data])
        
        # üîç ‡§á‡§®‡§™‡•Å‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡§æ‡§â‡§®‡•á
        st.markdown("""
        <div class="custom-card">
        <h3 style="color:#2a4365; text-align:center;">üîç ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§¶‡§ø‡§®‡•Å‡§≠‡§è‡§ï‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
        </div>
        """, unsafe_allow_html=True)
        
        cols = st.columns(3)
        with cols[0]:
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§â‡§Æ‡•á‡§∞</h4>
            <h2 style="color:#4b6cb7;">{AGE} ‡§µ‡§∞‡•ç‡§∑</h2>
            </div>
            """, unsafe_allow_html=True)
        with cols[1]:
            gender = "‡§™‡•Å‡§∞‡•Å‡§∑" if SEX == 1 else "‡§Æ‡§π‡§ø‡§≤‡§æ"
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§≤‡§ø‡§ô‡•ç‡§ó</h4>
            <h2 style="color:#4b6cb7;">{gender}</h2>
            </div>
            """, unsafe_allow_html=True)
        with cols[2]:
            diabetes = "‡§õ" if DIABETES == 1 else "‡§õ‡•à‡§®"
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π</h4>
            <h2 style="color:#4b6cb7;">{diabetes}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        cols = st.columns(3)
        with cols[0]:
            obesity = "‡§õ" if OBESITY == 1 else "‡§õ‡•à‡§®"
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§Æ‡•ã‡§ü‡•ã‡§™‡§®</h4>
            <h2 style="color:#4b6cb7;">{obesity}</h2>
            </div>
            """, unsafe_allow_html=True)
        with cols[1]:
            pneumonia = "‡§õ" if PNEUMONIA == 1 else "‡§õ‡•à‡§®"
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§®‡§ø‡§Æ‡•ã‡§®‡§ø‡§Ø‡§æ</h4>
            <h2 style="color:#4b6cb7;">{pneumonia}</h2>
            </div>
            """, unsafe_allow_html=True)
        with cols[2]:
            tobacco = "‡§õ" if TOBACCO == 1 else "‡§õ‡•à‡§®"
            st.markdown(f"""
            <div class="metric-box">
            <h4>‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§®</h4>
            <h2 style="color:#4b6cb7;">{tobacco}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # üìä ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ó‡§∞‡•ç‡§®‡•á
        prediction = model.predict(input_df)[0]
        prediction_proba = model.predict_proba(input_df)[0][1]
        
        # üßæ ‡§®‡§§‡§ø‡§ú‡§æ ‡§¶‡•á‡§ñ‡§æ‡§â‡§®‡•á
        st.markdown("""
        <div class="custom-card">
        <h3 style="color:#2a4365; text-align:center;">üßÆ ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å‡§ï‡•ã ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if prediction == 1:
            st.markdown(f"""
            <div class="alert-high-risk">
            <h2 style="color:white; text-align:center; margin-top:0;">‚ö†Ô∏è ‡§â‡§ö‡•ç‡§ö ‡§ú‡•ã‡§ñ‡§ø‡§Æ!</h2>
            <h1 style="color:white; text-align:center; font-size:42px;">{prediction_proba*100:.2f}%</h1>
            <p style="text-align:center; color:rgba(255,255,255,0.9);">‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§π‡•Å‡§®‡•á ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div class="custom-card" style="border-left-color:#e53e3e;">
            <h4 style="color:#e53e3e;">üö® ‡§∏‡•Å‡§ù‡§æ‡§µ‡§π‡§∞‡•Ç:</h4>
            <ul style="font-size:16px;">
            <li>‡§°‡§æ‡§ï‡•ç‡§ü‡§∞‡§∏‡§Å‡§ó ‡§§‡•Å‡§∞‡•Å‡§®‡•ç‡§§‡•à ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§Ü‡§á‡§∏‡•ã‡§≤‡•á‡§∂‡§®‡§Æ‡§æ ‡§∞‡§π‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§Ö‡§ï‡•ç‡§∏‡§ø‡§ú‡§® ‡§≤‡•á‡§≠‡§≤ ‡§Æ‡•ã‡§®‡§ø‡§ü‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§Ü‡§™‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§∏‡§Å‡§ó ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="alert-low-risk">
            <h2 style="color:white; text-align:center; margin-top:0;">‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§¶‡•á‡§ñ‡§ø‡§®‡•ç‡§õ!</h2>
            <h1 style="color:white; text-align:center; font-size:42px;">{prediction_proba*100:.2f}%</h1>
            <p style="text-align:center; color:rgba(255,255,255,0.9);">‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§π‡•Å‡§®‡•á ‡§∏‡§Æ‡•ç‡§≠‡§æ‡§µ‡§®‡§æ</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div class="custom-card" style="border-left-color:#38a169;">
            <h4 style="color:#38a169;">üõ°Ô∏è ‡§∏‡•Å‡§ù‡§æ‡§µ‡§π‡§∞‡•Ç:</h4>
            <ul style="font-size:16px;">
            <li>‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ‡§ï‡•ã ‡§™‡§æ‡§≤‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡§æ‡§Ø‡§Æ ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§π‡§æ‡§§ ‡§ß‡•Å‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§Æ‡§æ‡§∏‡•ç‡§ï ‡§≤‡§ó‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            <li>‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡§ï ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§¨‡§¢‡§æ‡§â‡§®‡•á ‡§ñ‡§æ‡§®‡§æ ‡§ñ‡§æ‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)
        
        # ‡§°‡§æ‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¶‡•á‡§ñ‡§æ‡§â‡§®‡•á
        show_analysis(df)
        
        # ‡§´‡•Å‡§ü‡§∞
        st.markdown("---")
        st.markdown("""
        <div style="text-align:center; color:#4a5568; padding:20px;">
        <p style="font-size:14px;">‡§Ø‡•ã ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∏‡§® Logistic Regression ‡§Æ‡•ã‡§°‡•á‡§≤‡§Æ‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§õ</p>
        <p style="font-size:12px;">¬© 2082 KMC SEEP MELA AI AND IT'S APPLICATION TRAINING | ‡§®‡•á‡§™‡§æ‡§≤‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()